{"version":3,"sources":["../src/angularjs-captcha.js"],"names":["angular","captchaSettings","configuredSettings","captchaEndpoint","captchaEnabled","setSettings","settings","$get","extend","replace","captchaHelper","$http","$rootScope","getScript","url","method","then","response","Function","data","error","Error","getCaptchaEndpointHandler","splited","split","length","getBackendBaseUrl","captchaEndpointHandler","lastIndex","lastIndexOf","substring","changeRelativeToAbsoluteUrls","originCaptchaHtml","this","backendUrl","relativeUrl","relativeUrlPrefixPattern","absoluteUrl","relativeUrls","match","changedCaptchaHtml","i","slice","RegExp","loadScriptIncludes","element","captchaId","querySelector","captchaStyleName","value","scriptIncludeUrl","useUserInputBlurValidation","userInput","getAttribute","validateUnsafe","captchaInstance","callback","captchaCode","validationUrl","params","isHuman","getHtml","styleName","get","c","captchaHtml","botdetectCaptchaDirective","restrict","link","scope","attrs","captchastylename","stylename","html","correctCaptchaDirective","Captcha","require","ctrls","captcha","ngModel","$setValidity","bind","val","reloadImage","captchaService","$document","undefined","window","botdetect","instance","getInstance","getInstanceByStyleName","prototype","getCaptchaId","getUserEnteredCaptchaCode","self","generateCaptchaMarkup","placeholder","getElementsByTagName","innerHTML","module","provider","factory","directive"],"mappings":"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","file":"angularjs-captcha.min.js","sourcesContent":["/* BotDetect CAPTCHA AngularJS Module */\r\n\r\n(function(angular) {\r\n  'use strict';\r\n\r\n  // BotDetect Captcha module settings.\r\n  function captchaSettings() {\r\n    var configuredSettings = {},\r\n        captchaSettings = { \r\n          captchaEndpoint: '',\r\n          captchaEnabled: true\r\n        };\r\n\r\n    return {\r\n      setSettings: function(settings) {\r\n        configuredSettings = settings;\r\n      },\r\n\r\n      $get: function() {\r\n        angular.extend(captchaSettings, configuredSettings);\r\n        // normalize captcha endpoint path\r\n        captchaSettings.captchaEndpoint = captchaSettings.captchaEndpoint.replace(/\\/+$/g, '');\r\n        return captchaSettings;\r\n      }\r\n    };\r\n  }\r\n\r\n  // Captcha helper that provides useful functions.\r\n  function captchaHelper($http, $rootScope, captchaSettings) {\r\n    return {\r\n      getScript: function(url) {\r\n        $http({\r\n          method: 'GET',\r\n          url: url\r\n        })\r\n          .then(function(response) {\r\n            var f = new Function(response.data); f();\r\n          }, function(error) {\r\n            throw new Error(error.data);\r\n          });\r\n      },\r\n\r\n      // get captcha endpoint handler from configued captchaEndpoint value,\r\n      // the result can be \"simple-captcha-endpoint.ashx\", \"botdetectcaptcha\",\r\n      // or \"simple-botdetect.php\"\r\n      getCaptchaEndpointHandler: function() {\r\n        var splited = captchaSettings.captchaEndpoint.split('/');\r\n        return splited[splited.length - 1];\r\n      },\r\n\r\n      // get backend base url from configued captchaEndpoint value\r\n      getBackendBaseUrl: function(captchaEndpointHandler) {\r\n        var lastIndex = captchaSettings.captchaEndpoint.lastIndexOf(captchaEndpointHandler);\r\n        return captchaSettings.captchaEndpoint.substring(0, lastIndex);\r\n      },\r\n\r\n      // change relative to absolute urls in captcha html markup\r\n      changeRelativeToAbsoluteUrls: function(originCaptchaHtml) {\r\n        var captchaEndpointHandler = this.getCaptchaEndpointHandler();\r\n        var backendUrl = this.getBackendBaseUrl(captchaEndpointHandler);\r\n\r\n        originCaptchaHtml = originCaptchaHtml.replace(/<script.*<\\/script>/g, '');\r\n        var relativeUrls = originCaptchaHtml.match(/(src|href)=\\\"([^\"]+)\\\"/g);\r\n        \r\n        var relativeUrl, relativeUrlPrefixPattern, absoluteUrl,\r\n            changedCaptchaHtml = originCaptchaHtml;\r\n\r\n        for (var i = 0; i < relativeUrls.length; i++) {\r\n          relativeUrl = relativeUrls[i].slice(0, -1).replace(/src=\\\"|href=\\\"/, '');\r\n          relativeUrlPrefixPattern = new RegExp(\".*\" + captchaEndpointHandler);\r\n          absoluteUrl = relativeUrl.replace(relativeUrlPrefixPattern, backendUrl + captchaEndpointHandler);\r\n          changedCaptchaHtml = changedCaptchaHtml.replace(relativeUrl, absoluteUrl);\r\n        }\r\n\r\n        return changedCaptchaHtml;\r\n      },\r\n      \r\n      loadScriptIncludes: function(element) {\r\n        var captchaId = element.querySelector('#BDC_VCID_' + $rootScope.captchaStyleName).value;\r\n        var scriptIncludeUrl = captchaSettings.captchaEndpoint + '?get=script-include&c=' + $rootScope.captchaStyleName + '&t=' + captchaId + '&cs=200';\r\n        this.getScript(scriptIncludeUrl);\r\n      },\r\n\r\n      useUserInputBlurValidation: function(userInput) {\r\n        return (userInput.getAttribute('correct-captcha') !== null);\r\n      },\r\n\r\n      validateUnsafe: function(captchaInstance, callback) {\r\n        var captchaCode = captchaInstance.userInput;\r\n        if (captchaCode.length !== 0) {\r\n          $http({\r\n            method: 'GET',\r\n            url: captchaInstance.validationUrl,\r\n            params: {\r\n              i: captchaCode.value\r\n            }\r\n          })\r\n            .then(function(response) {\r\n              var isHuman = response.data;\r\n              callback(isHuman);\r\n            }, function(error) {\r\n              throw new Error(error.data);\r\n            });\r\n        } else {\r\n          var isHuman = false;\r\n          callback(isHuman);\r\n        }\r\n      },\r\n\r\n      getHtml: function(styleName, callback) {\r\n        $http({\r\n          method: 'GET',\r\n          url: captchaSettings.captchaEndpoint,\r\n          params: {\r\n            get: 'html',\r\n            c: styleName\r\n          }\r\n        })\r\n          .then(function(response) {\r\n            var captchaHtml = response.data;\r\n            callback(captchaHtml);\r\n          }, function(error) {\r\n            throw new Error(error.data);\r\n          });\r\n      }\r\n    };\r\n  }\r\n  \r\n  // <botdetect-captcha> directive element, which is used to display Captcha html markup.\r\n  function botdetectCaptchaDirective($rootScope, captchaSettings, captchaHelper) {\r\n    return {\r\n      restrict: 'E',\r\n      link: function(scope, element, attrs) {\r\n        if (!captchaSettings.captchaEnabled) {\r\n          return;\r\n        }\r\n\r\n        var captchaStyleName = (function() {\r\n          var styleName;\r\n\r\n          styleName = attrs.captchastylename;\r\n          if (styleName) {\r\n            return styleName;\r\n          }\r\n\r\n          // backward compatibility\r\n          styleName = attrs.stylename;\r\n          if (styleName) {\r\n            return styleName;\r\n          }\r\n\r\n          throw new Error('The captchaStyleName attribute is not found or its value is not set.');\r\n        })();\r\n        \r\n        // save captchaStyleName in $rootScope, that will be used in correctCaptcha directive and Captcha service for getting BotDetect instance\r\n        $rootScope.captchaStyleName = captchaStyleName;\r\n\r\n        captchaHelper.getHtml(captchaStyleName, function(captchaHtml) {\r\n          // show captcha html in view\r\n          captchaHtml = captchaHelper.changeRelativeToAbsoluteUrls(captchaHtml);\r\n          element.html(captchaHtml);\r\n\r\n          // load botdetect scripts\r\n          captchaHelper.loadScriptIncludes(element[0]);\r\n        });\r\n      }\r\n    };\r\n  }\r\n\r\n  // 'correct-captcha' directive attribute, which is used to perform ui captcha validaion.\r\n  function correctCaptchaDirective(Captcha, captchaHelper) {\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function(scope, element, attrs, ctrls) {\r\n        var captcha,\r\n            captchaCode,\r\n            ngModel = ctrls;\r\n\r\n        ngModel.$setValidity('incorrectCaptcha', false);\r\n\r\n        // client-side validate captcha on blur event\r\n        element.bind('blur', function() {\r\n          captchaCode = element.val();\r\n\r\n          if (captchaCode.length === 0) {\r\n            return;\r\n          }\r\n\r\n          captcha = new Captcha();\r\n\r\n          captchaHelper.validateUnsafe(captcha, function(isHuman) {\r\n            if (isHuman) {\r\n              // correct captcha code\r\n              ngModel.$setValidity('incorrectCaptcha', true);\r\n            } else {\r\n              // incorrect captcha code\r\n              ngModel.$setValidity('incorrectCaptcha', false);\r\n              captcha.reloadImage();\r\n            }\r\n          });\r\n        });\r\n      }\r\n    };\r\n  }\r\n\r\n  // Captcha client-side instance exposes Captcha workflow functions and values.\r\n  function captchaService($document, $rootScope, captchaHelper) {\r\n    var Captcha = function() {\r\n      if (window.botdetect === undefined) {\r\n        throw new Error('Can not create Captcha instance, please put \"new Captcha()\" inside function that will be invoked after form is submitted.');\r\n      }\r\n\r\n      var instance = Captcha.getInstance();\r\n\r\n      this.captchaStyleName = $rootScope.captchaStyleName;\r\n      this.captchaId = instance.captchaId;\r\n      this.userInput = instance.userInput;\r\n      this.validationUrl = instance.validationUrl;\r\n    };\r\n\r\n    Captcha.getInstance = function() {\r\n      return $rootScope.captchaStyleName\r\n        ? window.botdetect.getInstanceByStyleName($rootScope.captchaStyleName)\r\n        : null;\r\n    };\r\n\r\n    Captcha.prototype.getCaptchaId = function() {\r\n      return this.captchaId;\r\n    };\r\n\r\n    Captcha.prototype.getUserEnteredCaptchaCode = function() {\r\n      return this.userInput.value;\r\n    };\r\n\r\n    Captcha.prototype.validateUnsafe = function(callback) {\r\n      var self = this;\r\n      captchaHelper.validateUnsafe(this, function(isHuman) {\r\n        callback(isHuman);\r\n        if (!captchaHelper.useUserInputBlurValidation(self.userInput) && !isHuman) {\r\n          self.reloadImage();\r\n        }\r\n      });\r\n    };\r\n\r\n    Captcha.prototype.reloadImage = function() {\r\n      Captcha.getInstance().reloadImage();\r\n    };\r\n\r\n    Captcha.generateCaptchaMarkup = function(captchaStyleName) {\r\n      // save captchaStyleName in $rootScope, it will be used in Captcha service for getting BotDetect instance\r\n      $rootScope.captchaStyleName = captchaStyleName;\r\n\r\n      captchaHelper.getHtml(captchaStyleName, function(captchaHtml) {\r\n        var placeholder = $document[0].getElementsByTagName('botdetect-captcha');\r\n        if (placeholder.length !== 0) {\r\n          // show captcha html in view\r\n          placeholder[0].innerHTML = captchaHtml;\r\n          \r\n          // load botdetect scripts\r\n          captchaHelper.loadScriptIncludes(placeholder[0]);\r\n        } else {\r\n          throw new Error('<botdetect-captcha> directive element could not be found.');\r\n        }\r\n      });\r\n    };\r\n\r\n    return Captcha;\r\n  }\r\n\r\n  angular\r\n    .module('BotDetectCaptcha', [])\r\n    .provider('captchaSettings', captchaSettings)\r\n    .factory('captchaHelper', [\r\n      '$http',\r\n      '$rootScope',\r\n      'captchaSettings',\r\n      captchaHelper\r\n    ])\r\n    .factory('Captcha', [\r\n      '$document',\r\n      '$rootScope',\r\n      'captchaHelper',\r\n      captchaService\r\n    ])\r\n    .directive('botdetectCaptcha', [\r\n      '$rootScope',\r\n      'captchaSettings',\r\n      'captchaHelper',\r\n      botdetectCaptchaDirective\r\n    ])\r\n    .directive('correctCaptcha', [\r\n      'Captcha',\r\n      'captchaHelper',\r\n      correctCaptchaDirective\r\n    ]);\r\n\r\n})(window.angular);\r\n"]}